import { useState, useEffect } from 'react';
import { useAccount, useSendTransaction, useSwitchChain, useBalance } from 'wagmi';
import { parseEther } from 'viem';
import { ConnectButton } from '@rainbow-me/rainbowkit';
import { useWallet as useSuiWallet } from '@suiet/wallet-kit';
import { TransactionBlock } from '@mysten/sui.js/transactions';
import { Connection, PublicKey, Transaction, SystemProgram, LAMPORTS_PER_SOL, clusterApiUrl } from '@solana/web3.js';
import { Product } from './ProductList';

// Phantom 钱包类型
interface PhantomWindow extends Window {
  solana?: {
    isPhantom?: boolean;
    connect: () => Promise<{ publicKey: { toString: () => string } }>;
    disconnect: () => Promise<void>;
    signAndSendTransaction: (transaction: any) => Promise<any>;
    publicKey: { toString: () => string } | null;
  };
}

declare const window: PhantomWindow;

interface PurchaseModalProps {
  product: Product;
  isOpen: boolean;
  onClose: () => void;
}

type BlockchainType = 'eth' | 'solana' | 'sui';

interface TokenPrices {
  eth: number;
  solana: number;
  sui: number;
}

const PurchaseModal = ({ product, isOpen, onClose }: PurchaseModalProps) => {
  const [selectedChain, setSelectedChain] = useState<BlockchainType>('sui');
  const [loading, setLoading] = useState(false);
  const [prices, setPrices] = useState<TokenPrices>({
    eth: 3000, // 默认价格，将被API数据替换
    solana: 150,
    sui: 2.5
  });
  const [tokenAmount, setTokenAmount] = useState('0');
  
  // ETH 钱包状态
  const { isConnected: isEthConnected } = useAccount();
  const { sendTransaction } = useSendTransaction();
  const { switchChain } = useSwitchChain();
  const { data: ethBalance } = useBalance();
  
  // Sui 钱包状态
  const suiWallet = useSuiWallet();
  
  // Solana 钱包状态
  const [solanaConnected, setSolanaConnected] = useState(false);
  const [solanaPublicKey, setSolanaPublicKey] = useState<string | null>(null);
  const [solanaBalance, setSolanaBalance] = useState<number | null>(null);

  // 检查 Solana 钱包连接状态
  useEffect(() => {
    const checkSolanaWallet = () => {
      if (window.solana && window.solana.publicKey) {
        setSolanaConnected(true);
        setSolanaPublicKey(window.solana.publicKey.toString());
        fetchSolanaBalance(window.solana.publicKey.toString());
      }
    };
    
    checkSolanaWallet();
  }, [selectedChain]);
  
  // 获取 Solana 余额
  const fetchSolanaBalance = async (publicKey: string) => {
    try {
      const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');
      const balance = await connection.getBalance(new PublicKey(publicKey));
      setSolanaBalance(balance / LAMPORTS_PER_SOL);
    } catch (error) {
      console.error('获取Solana余额失败:', error);
    }
  };

  // 连接 Solana 钱包
  const connectSolanaWallet = async () => {
    if (!window.solana) {
      alert('请安装 Phantom 钱包扩展!');
      return;
    }
    
    try {
      setLoading(true);
      const response = await window.solana.connect();
      setSolanaConnected(true);
      setSolanaPublicKey(response.publicKey.toString());
      fetchSolanaBalance(response.publicKey.toString());
    } catch (error) {
      console.error('连接Solana钱包失败:', error);
    } finally {
      setLoading(false);
    }
  };

  // 获取代币价格
  useEffect(() => {
    const fetchTokenPrices = async () => {
      try {
        const response = await fetch('https://data-api.coindesk.com/spot/v1/latest/tick?instruments=ETH-USD,SOL-USD,SUI-USD&apply_mapping=true&market=coinbase');
        const data = await response.json();
        
        const realPrices = {
          eth: data.Data['ETH-USD']?.BEST_ASK || 3000,
          solana: data.Data['SOL-USD']?.BEST_ASK || 150,
          sui: data.Data['SUI-USD']?.BEST_ASK || 2.5
        };
        
        setPrices(realPrices);
        updateTokenAmount(realPrices);
      } catch (error) {
        console.error('获取代币价格失败:', error);
      }
    };
    
    fetchTokenPrices();
  }, [product]);

  // 更新代币数量
  const updateTokenAmount = (tokenPrices: TokenPrices) => {
    setTokenAmount((product.price / tokenPrices[selectedChain]).toFixed(6));
  };

  // 切换区块链
  useEffect(() => {
    updateTokenAmount(prices);
  }, [selectedChain]);

  // 处理购买
  const handlePurchase = async () => {
    setLoading(true);
    
    try {
      switch (selectedChain) {
        case 'eth':
          await handleEthPurchase();
          break;
        case 'solana':
          await handleSolanaPurchase();
          break;
        case 'sui':
          await handleSuiPurchase();
          break;
      }
      
      alert('购买成功！');
      onClose();
    } catch (error) {
      console.error('购买失败:', error);
      alert('购买失败，请重试');
    } finally {
      setLoading(false);
    }
  };

  // ETH 购买逻辑
  const handleEthPurchase = async () => {
    if (!isEthConnected) throw new Error('ETH 钱包未连接');
    
    // 这里应该是实际的购买逻辑，例如调用合约
    // 这里简化为直接转账
    await sendTransaction({
      to: '0x123456789abcdef123456789abcdef123456789a', // 接收方地址
      value: parseEther(tokenAmount)
    });
  };

  // Solana 购买逻辑
  const handleSolanaPurchase = async () => {
    if (!solanaConnected || !solanaPublicKey) {
      throw new Error('Solana 钱包未连接');
    }
    
    try {
      const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');
      
      // 创建交易
      const transaction = new Transaction().add(
        SystemProgram.transfer({
          fromPubkey: new PublicKey(solanaPublicKey),
          toPubkey: new PublicKey('7C4jsPZpht1JHR1CiLXbCMqRHLMz3sV3hRFWE6M3H33J'), // 接收方地址
          lamports: Math.floor(parseFloat(tokenAmount) * LAMPORTS_PER_SOL)
        })
      );
      
      // 获取最新的区块哈希
      const { blockhash } = await connection.getLatestBlockhash();
      transaction.recentBlockhash = blockhash;
      transaction.feePayer = new PublicKey(solanaPublicKey);
      
      // 发送交易
      if (!window.solana) throw new Error('Phantom 钱包未安装');
      
      const signed = await window.solana.signAndSendTransaction(transaction);
      
      // 等待交易确认
      await connection.confirmTransaction(signed.signature);
      
      console.log('Solana 交易成功:', signed.signature);
    } catch (error) {
      console.error('Solana 交易失败:', error);
      throw error;
    }
  };

  // Sui 购买逻辑
  const handleSuiPurchase = async () => {
    if (!suiWallet.connected) {
      throw new Error('Sui 钱包未连接');
    }
    
    try {
      // 创建交易
      const tx = new TransactionBlock();
      
      // 添加转账操作
      tx.transferObjects([
        tx.splitCoins(
          tx.gas,
          [tx.pure(Math.floor(parseFloat(tokenAmount) * 1e9))]
        )
      ], tx.pure('0x123456789abcdef123456789abcdef123456789abcdef')); // 接收方地址
      
      // 执行交易
      const result = await suiWallet.signAndExecuteTransactionBlock({
        transactionBlock: tx
      });
      
      console.log('Sui 交易成功:', result);
    } catch (error) {
      console.error('Sui 交易失败:', error);
      throw error;
    }
  };

  // 检查当前链是否已连接钱包
  const isWalletConnected = () => {
    switch (selectedChain) {
      case 'eth':
        return isEthConnected;
      case 'solana':
        return solanaConnected;
      case 'sui':
        return suiWallet.connected;
      default:
        return false;
    }
  };

  // 获取当前链的余额
  const getBalanceDisplay = () => {
    switch (selectedChain) {
      case 'eth':
        return ethBalance ? `${parseFloat(ethBalance.formatted).toFixed(4)} ETH` : '加载中...';
      case 'solana':
        return solanaBalance !== null ? `${solanaBalance.toFixed(4)} SOL` : '加载中...';
      case 'sui':
        // Sui 钱包余额需要从 suiWallet.getBalance() 获取，这里简化处理
        return suiWallet.connected ? `${suiWallet.account?.address ? '余额可用' : '0.0000'} SUI` : '加载中...';
      default:
        return '未知';
    }
  };

  // 渲染连接钱包按钮
  const renderConnectButton = () => {
    switch (selectedChain) {
      case 'eth':
        return <ConnectButton />;
      case 'solana':
        return (
          <button
            onClick={connectSolanaWallet}
            disabled={loading}
            className="w-full bg-transparent border-2 border-purple-500 text-purple-400 hover:bg-purple-500/10 font-medium py-2 px-4 rounded-lg transition-all duration-200 hover:text-white"
          >
            {loading ? '连接中...' : '连接 Phantom 钱包'}
          </button>
        );
      case 'sui':
        return (
          <button
            onClick={() => suiWallet.select && suiWallet.select('Suiet')}
            disabled={loading}
            className="w-full bg-transparent border-2 border-teal-500 text-teal-400 hover:bg-teal-500/10 font-medium py-2 px-4 rounded-lg transition-all duration-200 hover:text-white"
          >
            {loading ? '连接中...' : '连接 Sui 钱包'}
          </button>
        );
      default:
        return null;
    }
  };

  return (
    <div 
      className={`fixed inset-0 bg-black/60 backdrop-blur-sm flex items-end justify-center z-50 transition-all duration-300 ${isOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'}`}
      onClick={onClose}
    >
      <div 
        className={`bg-gradient-to-b from-gray-800 to-gray-900 rounded-t-2xl shadow-2xl w-full max-w-md overflow-hidden border-t border-x border-gray-700/50 transition-all duration-300 transform ${isOpen ? 'translate-y-0' : 'translate-y-full'}`}
        onClick={(e) => e.stopPropagation()}
      >
        <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500"></div>
        <div className="p-6 relative overflow-hidden">
          <div className="absolute -top-24 -right-24 w-48 h-48 bg-blue-500/10 rounded-full blur-3xl"></div>
          <div className="absolute -bottom-24 -left-24 w-48 h-48 bg-purple-500/10 rounded-full blur-3xl"></div>
          
          <div className="flex justify-between items-center mb-6 relative z-10">
            <h3 className="text-xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent">购买商品</h3>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-white bg-gray-800/50 rounded-full p-1.5 transition-all hover:bg-gray-700/70"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          <div className="flex items-center gap-5 mb-6 bg-gray-800/50 p-4 rounded-xl border border-gray-700/50 relative z-10">
            <div className="relative">
              <img
                src={product.imageUrl}
                alt={product.name}
                className="w-20 h-20 rounded-lg object-cover ring-2 ring-gray-700/50 shadow-lg"
              />
              <div className="absolute -top-2 -right-2 bg-blue-500 text-white text-xs font-bold rounded-full w-6 h-6 flex items-center justify-center shadow-lg">
                1
              </div>
            </div>
            <div>
              <h4 className="text-white font-bold mb-1">{product.name}</h4>
              <div className="text-gray-400 text-sm mb-2">ID: {product.id.split('-')[1]}</div>
              <div className="bg-blue-500/20 text-blue-300 px-2 py-0.5 rounded text-xs inline-block">
                ${product.price.toFixed(2)}
              </div>
            </div>
          </div>

          <div className="bg-gray-800/50 rounded-xl p-5 mb-6 border border-gray-700/30 relative z-10">
            <div className="flex justify-between items-center mb-4">
              <span className="text-gray-300">选择支付链</span>
            </div>
            <div className="flex gap-2 mb-4">
              <button
                onClick={() => setSelectedChain('eth')}
                className={`flex-1 p-3 rounded-lg border transition-all duration-200 ${
                  selectedChain === 'eth'
                    ? 'bg-blue-500/20 border-blue-500 shadow-lg shadow-blue-500/10'
                    : 'bg-gray-800/50 border-gray-700/50 hover:border-blue-500/50'
                }`}
              >
                <div className="flex flex-col items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mb-1" viewBox="0 0 32 32" fill="none">
                    <path d="M16 32C24.8366 32 32 24.8366 32 16C32 7.16344 24.8366 0 16 0C7.16344 0 0 7.16344 0 16C0 24.8366 7.16344 32 16 32Z" fill="#627EEA"/>
                    <path d="M16.498 4V12.87L23.995 16.22L16.498 4Z" fill="white" fillOpacity="0.6"/>
                    <path d="M16.498 4L9 16.22L16.498 12.87V4Z" fill="white"/>
                    <path d="M16.498 21.968V27.995L24 17.616L16.498 21.968Z" fill="white" fillOpacity="0.6"/>
                    <path d="M16.498 27.995V21.967L9 17.616L16.498 27.995Z" fill="white"/>
                    <path d="M16.498 20.573L23.995 16.22L16.498 12.872V20.573Z" fill="white" fillOpacity="0.2"/>
                    <path d="M9 16.22L16.498 20.573V12.872L9 16.22Z" fill="white" fillOpacity="0.6"/>
                  </svg>
                  <span className="text-xs font-medium">ETH</span>
                </div>
              </button>
              <button
                onClick={() => setSelectedChain('solana')}
                className={`flex-1 p-3 rounded-lg border transition-all duration-200 ${
                  selectedChain === 'solana'
                    ? 'bg-purple-500/20 border-purple-500 shadow-lg shadow-purple-500/10'
                    : 'bg-gray-800/50 border-gray-700/50 hover:border-purple-500/50'
                }`}
              >
                <div className="flex flex-col items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mb-1" viewBox="0 0 397 311" fill="none">
                    <path d="M64.6 237.9c2.4-2.4 5.7-3.8 9.2-3.8h322.4c5.8 0 8.7 7 4.6 11.1l-62.7 62.7c-2.4 2.4-5.7 3.8-9.2 3.8H6.5c-5.8 0-8.7-7-4.6-11.1l62.7-62.7z" fill="#9945FF"/>
                    <path d="M64.6 3.8C67.1 1.4 70.4 0 73.8 0h322.4c5.8 0 8.7 7 4.6 11.1l-62.7 62.7c-2.4 2.4-5.7 3.8-9.2 3.8H6.5c-5.8 0-8.7-7-4.6-11.1L64.6 3.8z" fill="#9945FF"/>
                    <path d="M333.1 120.1c-2.4-2.4-5.7-3.8-9.2-3.8H1.5c-5.8 0-8.7 7-4.6 11.1l62.7 62.7c2.4 2.4 5.7 3.8 9.2 3.8h322.4c5.8 0 8.7-7 4.6-11.1l-62.7-62.7z" fill="#9945FF"/>
                  </svg>
                  <span className="text-xs font-medium">Solana</span>
                </div>
              </button>
              <button
                onClick={() => setSelectedChain('sui')}
                className={`flex-1 p-3 rounded-lg border transition-all duration-200 ${
                  selectedChain === 'sui'
                    ? 'bg-teal-500/20 border-teal-500 shadow-lg shadow-teal-500/10'
                    : 'bg-gray-800/50 border-gray-700/50 hover:border-teal-500/50'
                }`}
              >
                <div className="flex flex-col items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mb-1" viewBox="0 0 32 32" fill="none">
                    <path d="M16 0C7.163 0 0 7.163 0 16C0 24.837 7.163 32 16 32C24.837 32 32 24.837 32 16C32 7.163 24.837 0 16 0Z" fill="#6FBCF0"/>
                    <path fillRule="evenodd" clipRule="evenodd" d="M23.5 8.5H8.5V23.5H23.5V8.5ZM16 13.5C14.619 13.5 13.5 14.619 13.5 16C13.5 17.381 14.619 18.5 16 18.5C17.381 18.5 18.5 17.381 18.5 16C18.5 14.619 17.381 13.5 16 13.5Z" fill="white"/>
                  </svg>
                  <span className="text-xs font-medium">Sui</span>
                </div>
              </button>
            </div>
          </div>

          <div className="bg-gray-800/50 rounded-xl p-5 mb-6 border border-gray-700/30 relative z-10">
            <div className="flex justify-between items-center mb-3">
              <span className="text-gray-300 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1.5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                支付金额
              </span>
              <div className="font-medium text-white bg-gradient-to-r from-blue-500/20 to-purple-500/20 px-3 py-1 rounded-full text-sm">
                {tokenAmount} <span className="font-bold">{selectedChain.toUpperCase()}</span>
              </div>
            </div>
            <div className="h-px bg-gradient-to-r from-transparent via-gray-700/50 to-transparent my-3"></div>
            <div className="flex justify-between items-center text-sm mb-2">
              <span className="text-gray-400">USD 价格</span>
              <span className="text-gray-300 font-medium">${product.price.toFixed(2)}</span>
            </div>
            <div className="flex justify-between items-center text-sm">
              <span className="text-gray-400">当前汇率</span>
              <span className="text-gray-300">1 {selectedChain.toUpperCase()} = <span className="text-blue-400">${prices[selectedChain].toFixed(2)}</span></span>
            </div>
          </div>

          {isWalletConnected() && (
            <div className="bg-gray-800/50 rounded-xl p-5 mb-6 border border-gray-700/30 relative z-10">
              <div className="flex justify-between items-center">
                <span className="text-gray-300 flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1.5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
                  </svg>
                  钱包余额
                </span>
                <span className="font-medium text-white bg-gray-700/70 px-3 py-1 rounded-full text-sm">{getBalanceDisplay()}</span>
              </div>
            </div>
          )}

          <div className="relative z-10">
            {isWalletConnected() ? (
              <button
                onClick={handlePurchase}
                disabled={loading}
                className={`w-full font-bold py-3.5 px-4 rounded-xl transition-all duration-300 shadow-lg flex items-center justify-center gap-2 ${
                  selectedChain === 'eth'
                    ? 'bg-transparent border-2 border-blue-500 text-blue-400 hover:bg-blue-500/10'
                    : selectedChain === 'solana'
                    ? 'bg-transparent border-2 border-purple-500 text-purple-400 hover:bg-purple-500/10'
                    : 'bg-transparent border-2 border-teal-500 text-teal-400 hover:bg-teal-500/10'
                } transform hover:scale-[1.02] active:scale-[0.98]`}
              >
                {loading ? (
                  <>
                    <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span>处理中...</span>
                  </>
                ) : (
                  <span>立即购买</span>
                )}
              </button>
            ) : (
              renderConnectButton()
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default PurchaseModal;
